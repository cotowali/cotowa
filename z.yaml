default: default
disable_help: true
var:
  bin: $(pwd)/.bin
  tmp: $(pwd)/tmp
  install_dir: /usr/local/bin
  lic_path: cmd/lic
  lish_path: cmd/lish
  kuqi_path: cmd/kuqi
  hello_world: examples/hello_world.li
  err_source: tests/expr_err.li
  format_sources: cmd/lic cmd/tools jsonrpc lsp cotowali kuqi
tasks:
  default: |
    if [ "$#" -eq 0 ]
    then
      z build
    else
      z run $@
    fi

  run: z lic run $@
  debug: z lic debug $@
  no-emit: z lic no-emit $@

  build: z lic build && z lish build && z kuqi build
  build.win: z lic build.win && z lish build.win && z kuqi build.win
  symlink: z lic symlink && z lish symlink && z kuqi symlink
  install: z lic install && z lish install && z kuqi install

  lic:
    run: z lic build
    tasks:
      build: mkdir -p {{bin}} && v {{lic_path}} -o {{bin}}/lic
      build.win: mkdir -p {{bin}} && v {{lic_path}} -o {{bin}}/lic.exe -os windows
      build.c: v {{lic_path}} -o main.c
      debug: z lic run debug $@
      no-emit: z lic run no-emit $@
      run:
        run: v run {{lic_path}} "$@"
        tasks:
          stdin: v run {{lic_path}}
          no-emit: v run {{lic_path}} -no-emit $@
          debug:
            env:
              - LD_PRELOAD=/lib/x86_64-linux-gnu/libSegFault.so
              - SEGFAULT_SIGNALS=all
            run: v -cg -g run {{lic_path}} $@
          trace.lexer: v -cg -d trace_lexer run {{lic_path}} -no-emit $@
          trace.parser: v -cg -d trace_parser run {{lic_path}} -no-emit $@
          trace.resolver: v -cg -d trace_resolver run {{lic_path}} -no-emit $@
          trace.checker: v -cg -d trace_checker run {{lic_path}} -no-emit $@
      install: cp {{bin}}/lic {{install_dir}}/lic
      symlink: ln -fs {{bin}}/lic {{install_dir}}/lic
  lish:
    run: z lish run
    tasks:
      run: v run {{lish_path}} $@
      build: mkdir -p {{bin}} && v {{lish_path}} -o {{bin}}/lish
      build.win: mkdir -p {{bin}} && v {{lish_path}} -o {{bin}}/lish.exe -os windows
      install: cp {{bin}}/lish {{install_dir}}/lish
      symlink: ln -fs {{bin}}/lish {{install_dir}}/lish
  kuqi:
    tasks:
      run: v run {{kuqi_path}} $@
      build: v {{kuqi_path}} -o {{bin}}/kuqi $@
      build.gc: v {{kuqi_path}} -o {{bin}}/kuqi -gc boehm $@
      build.win: v {{kuqi_path}} -o {{bin}}/kuqi.exe -os windows $@
      install: cp {{bin}}/lic {{install_dir}}/lic
      symlink: ln -fs {{bin}}/kuqi {{install_dir}}/kuqi

  ast: z run tools ast $@
  tokens: z run tools tokens $@
  scope: z run tools scope $@

  fix:
    - z fmt

  test:
    run: |
      if [ "$#" -eq "0" ]
      then
        z test.unit
        z test.integration
      else
        for f in "$@"
        do
          if echo $f | grep -e '_test.v$' -e '^cotowali' > /dev/null
          then
            z test.unit $f
          else
            z test.integration $f
          fi
        done
      fi
    tasks:
      unit: v test ${@:-./cotowali}
      integration: v run tests/tester.v $@
      compile: v run tests/tester.v --compile $@
      fix: z test integration --fix $@
      prod: z test integration --prod $@
      hello: z run examples/hello.li
      watch: |
        watch=""
        for f in "$@"
        do
          watch="$watch -w $f"
        done
        watch="${watch:- -e li}"
        watchexec -r $watch z test $@

  fmt: v fmt -w {{format_sources}}
  fmt.c: z fmt && z test && git add . && git commit -m 'fmt'

  publish:
    run: z publish.docker
    tasks:
      docker:
        - docker compose --env-file ./docker/push.env build
        - docker compose --env-file ./docker/push.env push
  release:
    tasks:
      monthly: |
        date="$(date +%Y.%m)"
        tag="monthly.$date"
        git tag -s "$tag" -m "Monthly release: $date"
        git push origin "$tag"
  ci:
    tasks:
      setup-v: cd /tmp && git clone --depth=1 https://github.com/vlang/v && cd v && make && pwd >> $GITHUB_PATH
      format: v fmt -verify {{format_sources}}
      test: z test
      test.prod: z test prod
      test.shellcheck: z test --shellcheck
      run-on-all-conditions:
        - z {{hello_world}}
        - z ast {{hello_world}}
        - z ast {{err_source}}
        - z tokens {{hello_world}}
        - z tokens {{err_source}}
        - z scope {{hello_world}}
        - z scope {{err_source}}
        - z trace lexer {{hello_world}}
        - z trace parser {{hello_world}}
        - z trace resolver {{hello_world}}
        - z fix
