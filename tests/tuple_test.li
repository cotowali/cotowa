fn swap(a int, b int) (int, int) {
  return (b, a)
}

fn test_swap() {
  var a = 1
  var b = 2
  var new_a = a
  var new_b = a
  (new_a, new_b) = swap(a, b)
  assert new_a == b && new_b == a
}

fn ...int |> sum() |> int {
  var res = 0
  var v int
  while read(&v) {
    res = res + v
  }
  return res
}


fn ...(int, int) |> add() |> ...int {
  var v1 int
  var v2 int
  while read(&v1, &v2) {
    yield v1 + v2
  }
}

fn (int) |> twice() |> (int) {
  var n int
  read(&n)
  return n * 2
}

assert ((1, 2) |> add() |> sum()) == 3
assert ((3) |> twice()) == 6
assert (3 |> twice()) == (6)

fn () |> zero() int {
  return 0
}
assert (() |> zero()) == 0
