fn empty() {
  assert(true)
}
empty()

fn git(command: string): string
fn add(a: int, b: int): int {
  return a + b
}

fn div(a: float, b: float): float {
  return a / b
}

#if !pwsh
fn sum(vals: ...int): int {
  var res = 0
  for v in vals {
    res = res + v
  }
  return res
}
#endif

assert(add(1, 2) == 3)
assert(div(1, 2) == 0.5)
#if !pwsh
assert(sum(1, 2, 3) == 6)
#endif
assert(add(
  1

  ,

  2
  ,
) == 3)

#if sh
  assert(@expr('1', '+', '1') == '2')
  assert(((1.1 |> @awk('{print $1 * 2}')) as float) == 2.2)
#endif

fn f(): int {
  return 0
}

#if !pwsh
fn test_nested_func() {
  fn f(x: string): string {
    fn f(v: int): int {
      return 1 + v
    }
    var v = f(10)
    assert(v == 11)
    return "$x $v"
  }

  var v = f('v')
  assert(v == 'v 11')
}
test_nested_func()

fn test_varargs_array_method() {
  fn varargs_join(sep: string, vals: ...string): string {
    return vals.join(sep)
  }
  assert(varargs_join(':', 'a', 'b', 'c') == 'a:b:c')
}
test_varargs_array_method()
#endif
