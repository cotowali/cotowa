fn ...(int, int) |> f() |> ...(int, int) {
  return 0
  return ('x', 'y')
}

0 |> f()

fn () |> zero() |> int {
  var v: int
  read(&v)
  return 0
}

0 |> zero()
(1, 2) |> zero()

(0, 0) == (1)
(0, 0) == ('a', 'b')
(0, 0) * (0, 0)
(0, 0) / (0, 0)
(0, 1) + 2

var v: (...int)
var nested: ((int, int))

fn non_tuple_decompose() {
  var n = 10
  var v: (int, int)
  v = (...n, ...n)
  v = (...0, ...0)
}

fn tuple_index() {
  var n = 10

  _ = (0, "10")[-1]
  _ = (0, "10")[2]
  _ = (0, "10")[n]
  var _: int = (0, "10")[1]

  type IntStr = (int, string)
  var int_str: IntStr = (0, "10")
  _ = int_str[-1]
  _ = int_str[2]
  _ = int_str[n]
  var _: int = int_str[1]
}
