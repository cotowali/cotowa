type name_t = string
var name: name_t = 'bob'
assert name == 'bob'
assert (name as string) == 'bob'
assert name == ('bob' as name_t)

fn i_am(name: name_t) string {
  return "I am $name"
}

assert i_am('bob') == 'I am bob'

// --

type vec2 = (int, int)
type vec = vec2

fn vec2(x: int, y: int) vec2 {
  return (x, y)
}

fn vec2_add(v1: vec2, v2: vec2) vec2 {
  var (x1, y1) = v1
  var (x2, y2) = v2
  return (x1 + x2, y1 + y2)
}

fn vec_add(v1: vec, v2: vec) vec {
  return vec2_add(v1, v2)
}

var v1 = vec2(1, 2)
var v2 = vec2(3, 4)
var (added_x, added_y) = vec2_add(v1, v2)
assert added_x == 4 && added_y == 6

var vv: vec = v1
assert typeof(vv) == 'vec' && typeof(v1) == 'vec2'

// --

type NameList = []string
var names: NameList = ['bob', 'alice']
assert typeof(names) == 'NameList'
assert names[1] == 'alice'
