type name_t = string
var name: name_t = 'bob'
assert(name == 'bob')
assert((name as string) == 'bob')
assert(name == ('bob' as name_t))

fn i_am(name: name_t): string {
  return "I am $name"
}

assert(i_am('bob') == 'I am bob')

// --

fn test_infix_for_alias_type() {
  type Num = float
  var (a, b, c): (Num, Num, Num) = (1.5, 2.5, 4.0)
  assert(typeof(a + b) == 'Num')
  assert(a + b == c)
  assert(2 + 2 == c)
  assert(a + b == 4)

  type Name = string
  var s1: Name = 'ab'
  assert(s1 + s1 == 'abab')
}
test_infix_for_alias_type()


fn test_inherits_infix_op() {
  type Num = int
  type NumNum = Num
  type Num1 = Num
  type Num1_ = Num
  type Num2 = Num
  type Num_2 = Num
  type Num3 = Num

  var (nn, n1, n2, n3): (NumNum, Num1, Num2, Num3)

  fn (lhs: Num) + (rhs: Num): Num {
    return lhs + rhs
  }
  assert(typeof(nn + nn) == 'Num')

  fn (lhs: Num1) + (rhs: Num): Num1_ {
    return lhs + rhs
  }
  assert(typeof(n1 + n1) == 'Num1_')

  fn (lhs: Num) + (rhs: Num2): Num_2 {
    return lhs + rhs
  }
  assert(typeof(n2 + n2) == 'Num_2')

  fn (lhs: Num3) + (rhs: Num3): Num3 {
    return lhs + rhs
  }
  assert(typeof(n3 + n3) == 'Num3')

  assert(typeof(n3 + n1) == 'Num')
}
test_inherits_infix_op()

fn test_inherits_prefix_op() {
  type Num = int
  type Num1 = Num
  type Num2 = Num1
  type Num3 = Num2
  type Num4 = Num3

  var(n, n1, n2, n3, n4): (Num, Num1, Num2, Num3, Num4)

  fn +(n: Num): Num {
    return n
  }
  assert(typeof(+n) == 'Num')
  assert(typeof(+n1) == 'Num')

  fn +(n: Num2): Num2 {
    return n
  }
  assert(typeof(+n2) == 'Num2')
  assert(typeof(+n3) == 'Num2')

  fn +(n: Num4): Num4 {
    return n
  }
  assert(typeof(+n4) == 'Num4')
}
test_inherits_prefix_op()

fn test_inherits_methods() {
  type Num = float
  fn (n: Num) inc(): Num {
    return n + 1
  }
  fn (n: Num) inc2(): Num {
    return n + 1
  }

  type Num2 = Num
  fn (n: Num2) inc2(): Num2 {
    return (n as Num).inc2()
  }

  var (n, n2): (Num, Num2) = (1, 1)
  assert(n.inc() == 2)
  assert(typeof(n.inc()) == 'Num')
  assert(n2.inc() == 2)
  assert(typeof(n2.inc()) == 'Num')
  assert(n.inc2() == 2)
  assert(typeof(n.inc2()) == 'Num')
  assert(n2.inc2() == 2)
  assert(typeof(n2.inc2()) == 'Num2')
}
test_inherits_methods()

// --

type vec2 = (int, int)
type vec = vec2

fn vec2(x: int, y: int): vec2 {
  return (x, y)
}

fn vec2_add(v1: vec2, v2: vec2): vec2 {
  var (x1, y1) = v1
  var (x2, y2) = v2
  return (x1 + x2, y1 + y2)
}

fn vec_add(v1: vec, v2: vec): vec {
  return vec2_add(v1, v2)
}

var v1 = vec2(1, 2)
var v2 = vec2(3, 4)
var (added_x, added_y) = vec2_add(v1, v2)
assert(added_x == 4 && added_y == 6)

var vv: vec = v1
assert(typeof(vv) == 'vec' && typeof(v1) == 'vec2')

// --

type NameList = []string
var names: NameList = ['bob', 'alice']
assert(typeof(names) == 'NameList')
assert(names[1] == 'alice')
