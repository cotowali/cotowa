fn add(a: int, b: int) int {
  return a + b
}

fn test_var_without_init() {
  var int_var: int
  var float_var: float
  var string_var: string
  var bool_var: bool
  assert(int_var == 0)
  assert(float_var == 0.0)
  assert(string_var == '')
  assert(!bool_var)
}
test_var_without_init()

fn test_assign_with_promote() {
  var num: float = 1
  assert(num == 1)

  var (a, b): (float, float) = (1, 2)
  assert(a == 1.0 && b == 2.0)
}
test_assign_with_promote()

fn test_simple_assign() {
  var n = 0
  assert(n == 0)
  n = 1
  assert(n == 1)

  n = 1 + 2
  assert(n == 3)
  n = n + 2
  assert(n == 5)

  n = add(1, 2)
  assert(n == 3)
  n = add(n, 2)
  assert(n == 5)
}
test_simple_assign()

fn test_destructure_assign() {
  var (a, b) = (-1, 2)
  assert(a == -1 && b == 2)

  (a, b) = (a * 2, b * 2)
  assert(a == -2 && b == 4)

  (a, b) = (b, a)
  assert(a == 4 && b == -2)


  var (s, ss) = ('-s', '--ss')
  assert(s + ss == '-s--ss')
}
test_destructure_assign()

fn test_composite_assign() {
  var n = 0
  n += 3
  assert(n == 3)
  n *= 3
  assert(n == 9)
  n /= 3
  assert(n == 3)
  n %= 2
  assert(n == 1)
}
test_composite_assign()

fn test_discard_value() {
  var _ = 10
  var _ = '100'
  var _ = true
  var _ = [0, 1, 2]
  var (_, _) = (1.0, 1.5)
  _ = 100
  (_, _) = ('a', 'b')

  var tmp = '/tmp/cotowali_tmp.txt'
  var msg = 'hello'
  fn mktemp() string {
    msg |> tmp
    return tmp
  }
  var _ = mktemp() // right of assignment to _ is evaluated
  var tmp_content = cat(tmp)
  rm(tmp)
  assert(tmp_content == msg)
}
test_discard_value()

fn test_assign_fn() {
  fn f() int {
    return 42
  }
  var aliased_f = f
  assert(aliased_f() == 42)
}
test_assign_fn()
