require 'os'

fn test_env() {
  var key = '__custom__env__key__'
  assert(os::getenv(key) == '')
  os::setenv(key, 'v1')
  assert(os::getenv(key) == 'v1')
  os::setenv(key, 'v2')
  assert(os::getenv(key) == 'v2')
  os::unsetenv(key)
  assert(os::getenv(key) == '')
  os::unsetenv(key)
}
test_env()

fn test_path() {
  var res = os::path::join('a', 'b', 'c')
#if compiler_windows
  assert(res == r'a\b\c')
#else
  assert(res == 'a/b/c')
#endif
}
test_path()

fn test_clean_path() {
  var sep = os::path::separator
  // a/b/c -> a/b/c
  assert(os::path::clean(os::path::join('a', 'b', 'c')) == os::path::join('a', 'b', 'c'))
  // /a/../../ -> /
  assert(os::path::clean(os::path::join("${sep}a", '..', "..$sep")) == sep)
  // a/../.. -> .
  assert(os::path::clean(os::path::join('a', '..', '..')) == '.')
  // ./././ -> .
  assert(os::path::clean(os::path::join('.', '.', '.')) == '.')
  // ../../.. -> ../../..
  assert(os::path::clean(os::path::join('..', '..', '..')) == os::path::join('..', '..', '..'))
  // /a/../b -> /b
  assert(os::path::clean(os::path::join("${sep}a", '..', 'b')) == "${sep}b")
  // /a/../b/../c -> /c
  assert(os::path::clean(os::path::join("${sep}a", '..', 'b', '..', 'c')) == "${sep}c")
  // /a/../b../ -> /b..
  assert(os::path::clean(os::path::join("${sep}a", '..', 'b..')) == "${sep}b..")
  // a/b/../c -> a/c
  assert(os::path::clean(os::path::join("a", 'b', '..', 'c')) == os::path::join('a', 'c'))
}
test_clean_path()
