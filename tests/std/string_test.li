fn test_len() {
  assert(''.len() == 0)
  assert('abc'.len() == 3)
}
test_len()

fn test_index() {
  assert('00112'.index('01') == 1)
  assert('00112'.index('x') == -1)
  assert('ab"cd"ef'.index('"') == 2)
}
test_index()

fn test_substr() {
  assert(''.substr(0, 0) == '')
  assert(''.substr(0, 1) == '')
  assert('abc'.substr(0, 0) == '')
  assert('abc'.substr(0, -1) == '')
  assert('abc'.substr(0, 1) == 'a')
  assert('abc'.substr(1, 1) == 'b')
  assert('abc'.substr(2, 1) == 'c')
  assert('abc'.substr(0, 2) == 'ab')
  assert('abc'.substr(1, 2) == 'bc')
  assert('abc'.substr(2, 2) == 'c')
}
test_substr()

fn test_replace() {
  assert('ababc'.replace('ab', 'x') == 'xxc')
  assert('ababc'.replace('ab', 'x').replace('xx', 'y') == 'yc')
}
test_replace()

fn test_join() {
  assert([]string{}.join('') == '')
  assert([]string{}.join(':') == '')
  assert([]string{}.join('< >') == '')
  assert(['a'].join('') == 'a')
  assert(['a'].join(':') == 'a')
  assert(['a'].join('< >') == 'a')

  assert(['a', 'b', 'c'].join('') == 'abc')
  assert(['a', 'b', 'c'].join(':') == 'a:b:c')
  assert(['a', 'b', 'c'].join(' < > ') == 'a < > b < > c')
}
test_join()
