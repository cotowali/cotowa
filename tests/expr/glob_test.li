fn test_glob() {
  fn varargs_count(vals: ...string): int {
    return vals.len()
  }
  fn varargs_join(sep: string, vals: ...string): string {
    return vals.join(sep)
  }

  var names = [
    'glob_tmp1_1.txt',
    'glob_tmp1_2.txt',
    'glob_tmp2_1.txt',
    'glob_tmp2_2.txt',
  ]
  for name in names {
    touch(name)
  }

  var prefix = 'glob_tmp'
  var i = 1
  assert((@'glob_tmp*.txt'.join(' ')) == names.join(' '))
  assert((@"$prefix*.txt".join(' '))  == names.join(' '))

  assert(varargs_join(' ', @'glob_tmp*.txt') == names.join(' '))
  assert(varargs_count(@'glob_tmp*.txt') == names.len())
  assert(varargs_count('a', @'glob_tmp*.txt', 'b') == names.len() + 2)

  var tmp1_names = [names[0], names[1]]
  assert((@'glob_tmp1_*.txt'.join(' '))  == tmp1_names.join(' '))
  assert((@"$prefix$i*.txt".join(' '))   == tmp1_names.join(' '))
  assert((@"$prefix${1}*.txt".join(' ')) == tmp1_names.join(' '))

  assert(varargs_count(@'glob_tmp1*.txt') == tmp1_names.len())
  assert(varargs_count('a', @'glob_tmp1*.txt', 'b') == tmp1_names.len() + 2)

  assert(@printf('%s %s', @'glob_tmp1*.txt') == tmp1_names.join(' '))

  for name in names {
    rm(name)
  }
}
test_glob()
