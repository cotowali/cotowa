type Vec2 = (int, int)

fn (lhs: Vec2) + (rhs: Vec2): Vec2 {
  return (lhs[0] + rhs[0], lhs[1] + rhs[1])
}

fn (lhs: Vec2) - (rhs: Vec2): Vec2 {
  return (lhs[0] - rhs[0], lhs[1] - rhs[1])
}

fn (lhs: Vec2) * (rhs: int): Vec2 {
  return (lhs[0] * rhs, lhs[1] * rhs)
}

fn (lhs: Vec2) / (rhs: int): Vec2 {
  return (lhs[0] / rhs, lhs[1] / rhs)
}

fn +(v: Vec2): Vec2 {
  return v
}

fn -(v: Vec2): Vec2 {
  return (-v[0], -v[1])
}

var vec2_2: Vec2 = (2, 2)
var vec3_4: Vec2 = (3, 4)
assert(vec2_2 + vec3_4 == (5, 6))
assert(vec2_2 - vec3_4 == (-1, -2))
assert(vec2_2 * 2 == (4, 4))
assert(vec2_2 / 2 == (1, 1))

assert(-vec2_2 == (-2, -2))
assert(+vec2_2 == vec2_2)
assert(- -vec2_2 == vec2_2)
assert(+ -vec2_2 == - +vec2_2)

// ---

type Strange = int

fn (lhs: Strange) + (rhs: Strange): bool {
  return (lhs as int) == (rhs as int)
}

fn (lhs: Strange) - (rhs: Strange): bool {
  return (lhs as int) != (rhs as int)
}

fn (lhs: Strange) == (rhs: Strange): Strange {
  return (lhs as int) + (rhs as int)
}

fn (lhs: Strange) != (rhs: Strange): Strange {
  return (lhs as int) - (rhs as int)
}

fn +(v: Strange): Strange {
  return (v as int) * 2
}

fn -(v: Strange): Strange {
  return (v as int) / 2
}

fn !(v: Strange): Strange {
  return -(v as int)
}

fn &(v: Strange): int {
  return v as int
}


var (strange_1, strange_2): (Strange, Strange) = (1, 2)

// + is ==
assert(strange_1 + strange_1)
assert(!(strange_1 + strange_2))
// - is !=
assert(!(strange_1 - strange_1))
assert(strange_1 - strange_2)
// == is +
assert((strange_1 == strange_2) == 3)
// != is -
assert((strange_1 != strange_2) == -1)
// + is '* 2'
assert(+strange_1 == 2)
assert(+ +strange_1 == 4)
assert(+&+strange_1 == 2)
// - is '/ 2'
assert(-strange_2 == 1)
assert(+-strange_2 == 2)
assert(-&-strange_2== -1)
// ! is '* -1'
assert(!strange_1 == -1)
assert(!!strange_1 == 1)
