// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

echo('Ray tracing example')

// --------------------

fn vec3(x: float, y: float, z: float) (float, float, float) {
  return (x, y, z)
}

fn vec3_length_squared(v: (float, float, float)) float {
  var (x, y, z) = v
  return x * x + y * y + z * z
}

fn vec3_length(v: (float, float, float)) float {
  return (vec3_length_squared(v) |> @awk('{print sqrt($1)}')) as float
}

fn vec3_normalize(v: (float, float, float)) (float, float, float) {
  return vec3_divide(v, vec3_length(v))
}

fn vec3_add(v1: (float, float, float), v2: (float, float, float)) (float, float, float) {
  var (x1, y1, z1) = v1
  var (x2, y2, z2) = v2
  return vec3(x1 + x2, y1 + y2, z1 + z2)
}

fn vec3_subtract(v1: (float, float, float), v2: (float, float, float)) (float, float, float) {
  var (x1, y1, z1) = v1
  var (x2, y2, z2) = v2
  return vec3(x1 - x2, y1 - y2, z1 - z2)
}

fn vec3_multiply(v: (float, float, float), n: float) (float, float, float) {
  var (x, y, z) = v
  return vec3(x * n, y * n, z * n)
}

fn vec3_divide(v: (float, float, float), n: float) (float, float, float) {
  var (x, y, z) = v
  return vec3(x / n, y / n, z / n)
}

fn vec3_cross(v1: (float, float, float), v2: (float, float, float)) (float, float, float) {
  var (x1, y1, z1) = v1
  var (x2, y2, z2) = v2
  return vec3(y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - y1 * x2)
}

fn vec3_dot(v1: (float, float, float), v2: (float, float, float)) float {
  var (x1, y1, z1) = v1
  var (x2, y2, z2) = v2
  return x1 * x2 + y1 * y2 + z1 * z2
}

fn test_vec3() {
  var v1 = vec3(1.0, 2.0, 3.0)
  var v2 = vec3(4.0, 5.0, 6.0)

  assert vec3_length_squared(v1) == 14
  var v1_len = vec3_length(v1)
  assert 3.7 < v1_len && v1_len < 3.8

  var normalized_v1 = vec3_normalize(v1)
  assert 0.99 < vec3_length(normalized_v1) && vec3_length(normalized_v1) < 1.01

  var (sum_x, sum_y, sum_z) = vec3_add(v1, v2)
  assert sum_x == 5 && sum_y == 7 && sum_z == 9

  var (diff_x, diff_y, diff_z) = vec3_subtract(v2, v1)
  assert diff_x == 3 && diff_y == 3 && diff_z == 3

  var (twice_x1, twice_y1, twice_z1) = vec3_multiply(v1, 2)
  assert twice_x1 == 2 && twice_y1 == 4 && twice_z1 == 6

  var (half_x1, half_y1, half_z1) = vec3_divide(v1, 2)
  assert half_x1 == 0.5 && half_y1 == 1.0 && half_z1 == 1.5

  var cross = vec3_cross(v1, v2)
  var (cross_x, cross_y, cross_z) = cross
  assert cross_x == -3 && cross_y == 6 && cross_z == -3

  assert vec3_dot(v1, v2) == 1 * 4 + 2 * 5 + 3 * 6
  assert vec3_dot(v1, cross) == 0
  assert vec3_dot(v2, cross) == 0
}
test_vec3()

// --------------------
