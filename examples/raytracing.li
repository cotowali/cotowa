// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

echo('Ray tracing example')

// --------------------

var eps = 1e-5

fn eps_eq(a: float, b: float) bool {
  return a - b < eps
}

fn abs(v: float) float {
  if v < 0 {
    return -v
  } else {
    return v
  }
}

fn sqrt(v: float) float {
  return (v |> @awk('{printf "%lf", sqrt($1)}')) as float
}

fn test_math() {
  assert abs(1) == 1
  assert abs(-1) == 1.0

  assert sqrt(4) == 2
}
test_math()

// --------------------

type Vec3 = (float, float, float)

fn vec3(x: float, y: float, z: float) Vec3 {
  return (x, y, z)
}

fn vec3_x(v: Vec3) float {
  var (x, y, z) = v
  return x
}

fn vec3_y(v: Vec3) float {
  var (x, y, z) = v
  return y
}

fn vec3_z(v: Vec3) float {
  var (x, y, z) = v
  return z
}

fn vec3_length_squared(v: Vec3) float {
  var (x, y, z) = v
  return x * x + y * y + z * z
}

fn vec3_length(v: Vec3) float {
  return sqrt(vec3_length_squared(v))
}

fn vec3_normalize(v: Vec3) Vec3 {
  return vec3_divide(v, vec3_length(v))
}

fn vec3_add(v1: Vec3, v2: Vec3) Vec3 {
  return vec3(
    vec3_x(v1) + vec3_x(v2),
    vec3_y(v1) + vec3_y(v2),
    vec3_z(v1) + vec3_z(v2),
  )
}

fn vec3_subtract(v1: Vec3, v2: Vec3) Vec3 {
  return vec3(
    vec3_x(v1) - vec3_x(v2),
    vec3_y(v1) - vec3_y(v2),
    vec3_z(v1) - vec3_z(v2),
  )
}

fn vec3_multiply(v: Vec3, n: float) Vec3 {
  return vec3(vec3_x(v) * n, vec3_y(v) * n, vec3_z(v) * n)
}

fn vec3_divide(v: Vec3, n: float) Vec3 {
  return vec3(vec3_x(v) / n, vec3_y(v) / n, vec3_z(v) / n)
}

fn vec3_cross(v1: Vec3, v2: Vec3) Vec3 {
  return vec3(
    vec3_y(v1) * vec3_z(v2) - vec3_z(v1) * vec3_y(v2),
    vec3_z(v1) * vec3_x(v2) - vec3_x(v1) * vec3_z(v2),
    vec3_x(v1) * vec3_y(v2) - vec3_y(v1) * vec3_x(v2),
  )
}

fn vec3_dot(v1: Vec3, v2: Vec3) float {
  return vec3_x(v1) * vec3_x(v2) + vec3_y(v1) * vec3_y(v2) + vec3_z(v1) * vec3_z(v2)
}

fn test_vec3() {
  var v1 = vec3(1.0, 2.0, 3.0)
  var v2 = vec3(4.0, 5.0, 6.0)

  assert vec3_length_squared(v1) == 14
  var v1_len = vec3_length(v1)
  assert 3.7 < v1_len && v1_len < 3.8

  var normalized_v1 = vec3_normalize(v1)
  assert eps_eq(abs(vec3_length(normalized_v1)), 1)

  assert vec3_add(v1, v2)      == (5.0, 7.0, 9.0)
  assert vec3_subtract(v2, v1) == (3.0, 3.0, 3.0)
  assert vec3_multiply(v1, 2)  == (2.0, 4.0, 6.0)
  assert vec3_divide(v1, 2)    == (0.5, 1.0, 1.5)

  var cross = vec3_cross(v1, v2)
  assert vec3_x(cross) == -3 && vec3_y(cross) == 6 && vec3_z(cross) == -3
  assert vec3_dot(v1, v2) == 1 * 4 + 2 * 5 + 3 * 6
  assert vec3_dot(v1, cross) == 0
  assert vec3_dot(v2, cross) == 0
}
test_vec3()

// --------------------

type Ray = (...Vec3, ...Vec3)

fn ray(origin: Vec3, dir: Vec3) Ray {
  return origin + vec3_normalize(dir)
}

fn ray_origin(ray: Ray) Vec3 {
  var (origin_x, origin_y, origin_z, dir_x, dir_y, dir_z) = ray
  return vec3(origin_x, origin_y, origin_z)
}

fn ray_dir(ray: Ray) Vec3 {
  var (origin_x, origin_y, origin_z, dir_x, dir_y, dir_z) = ray
  return vec3(dir_x, dir_y, dir_z)
}

fn test_ray() {
  var origin = vec3(0, 0, 0)
  var dir = vec3(1, 1, 0)
  var r = ray(origin, dir)

  var r_origin = ray_origin(r)
  var r_dir = ray_dir(r)
  assert r_origin == origin
  assert eps_eq(vec3_length(r_dir), 1)
  assert eps_eq(vec3_x(r_dir), vec3_y(dir))

}
test_ray()

// --------------------

type RayHit = (...Vec3, ...Vec3, float) // (point, normal, distance); if not hit, distance == 0

fn ray_hit(point: Vec3, normal: Vec3, distance: float) RayHit {
  var (p_x, p_y, p_z) = point
  var (n_x, n_y, n_z) = vec3_normalize(normal)
  return (
    p_x, p_y, p_z,
    n_x, n_y, n_z,
    distance,
  )
}

fn ray_hit_null() RayHit {
  return (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
}

fn ray_hit_point(hit: RayHit) Vec3 {
  var (p_x, p_y, p_z, n_x, n_y, n_z, distance) = hit
  return vec3(p_x, p_y, p_z)
}

fn ray_hit_normal(hit: RayHit) Vec3 {
  var (p_x, p_y, p_z, n_x, n_y, n_z, distance) = hit
  return vec3(n_x, n_y, n_z)
}

fn ray_hit_distance(hit: RayHit) float {
  var (p_x, p_y, p_z, n_x, n_y, n_z, distance) = hit
  return distance
}

fn ray_hit_is_null(hit: RayHit) bool {
  return eps_eq(ray_hit_distance(hit), 0)
}

fn test_ray_hit() {
  var p = vec3(0, 0, 0)
  var normal = vec3(1, 1, 0)
  var distance = 10
  var rh = ray_hit(p, normal, distance)

  var rh_p = ray_hit_point(rh)
  var rh_n = ray_hit_normal(rh)
  var rh_distance = ray_hit_distance(rh)
  assert rh_p == p
  assert eps_eq(vec3_length(rh_n), 1)
  assert eps_eq(vec3_x(rh_n), vec3_x(normal))
  assert rh_distance == distance

  assert !ray_hit_is_null(rh)
  assert ray_hit_is_null(ray_hit_null())
}

// --------------------

type Sphere = (...Vec3, float)

fn sphere(center: Vec3, radius: float) Sphere {
  var (x, y, z) = center
  return (x, y, z, radius)
}

fn sphere_center(sphere: Sphere) Vec3 {
  var (x, y, z, radius) = sphere
  return vec3(x, y, z)
}

fn sphere_radius(sphere: Sphere) float {
  var (x, y, z, radius) = sphere
  return radius
}

fn test_sphere() {
  var center = vec3(0, -1, 1)
  var sp = sphere(center, 3)

  var c = sphere_center(sp)
  assert
    vec3_x(c) == 0 &&
    vec3_y(c) == -1 &&
    vec3_z(c) == 1
  assert sphere_radius(sp) == 3
}
test_sphere()
