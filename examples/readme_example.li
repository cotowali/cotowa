fn fib(n int) int {
  if n < 2 {
    return n
  }
  return fib(n - 1) + fib(n - 2)
}

fn int |> twice() int {
   var n = 0
   read(&n)
   return n * 2
}

assert fib(6) == 8
assert (fib(6) |> twice()) == 16

fn ...int |> sum() int {
  var v int
  var res = 0
  while read(&v) {
    res = res + v
  }
  return res
}

fn ...int |> twice_each() |> ...int {
  var n int
  while read(&n) {
    yield n * 2
  }
}

assert (seq(3) |> sum()) == 6
assert (seq(3) |> twice_each() |> sum()) == 12
