/// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
///
/// This Source Code Form is subject to the terms of the Mozilla Public
/// License, v. 2.0. If a copy of the MPL was not distributed with this
/// file, You can obtain one at https://mozilla.org/MPL/2.0/.

fn print(s: string) {
  sh { printf '%%s' "$%s" }
}

fn println(s: string) {
  sh { printf '%%s\n' "$%s" }
}

fn eprint(s: string) {
  sh { printf '%%s' "$%s" >&2 }
}

fn eprintln(s: string) {
  sh { printf '%%s\n' "$%s" >&2 }
}

fn ...string |> join(sep: string) |> string {
  var ret = ''
  var (i, s): (int, string)
  while read(&s) {
    if i > 0 {
      ret += sep
    }
    ret += s
    i += 1
  }
  return ret
}

fn range(begin: int, end: int) |> ...int {
  // cannot use negative number on busybox
  for i in @seq(0, end - begin - 1) as ...int {
    yield (i as int) + begin
  }
}

// -- posix --

fn exit(code: int)

fn string |> cat(files: ...string) |> ...string

fn seq(n: int) |> ...int

fn basename(path: string): string

fn cd(path: string)

fn dirname(path: string): string

fn mkdir(args: ...string)

fn mkdir_p(args: ...string) {
  sh {
    mkdir -p "$@"
  }
}

fn pwd(): string

fn ls(files: ...string) |> ...string

fn rm(paths: ...string)

fn rm_r(paths: ...string) {
  sh {
    rm -r "$@"
  }
}

fn touch(files: ...string)

// --- string methods ---

fn (s: string) replace(a: string, b: string): string {
  return s |> @sed("s/$a/$b/g")
}

fn (s: string) index(t: string): int {
  return (s|> @awk('-v', "t=$t", '{print index($1, t) - 1}')) as int
}

fn (s: string) len(): int {
  var n: int
  sh { %n=${#%s} }
  return n
}

// --- array methods ---
// All array inherits []any

fn (arr: []any) len(): int {
  var n: int
  sh { %n=$(array_len %arr) }
  return n
}

fn (ss: []string) join(sep: string): string {
  if ss.len() == 0 {
    return ''
  }
  var ret: string
  for i in range(0, ss.len()) {
    if i > 0 {
      ret += sep
    }
    ret += ss[i]
  }
  return ret
}
