/// platform.li
///
/// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
///
/// This Source Code Form is subject to the terms of the Mozilla Public
/// License, v. 2.0. If a copy of the MPL was not distributed with this
/// file, You can obtain one at https://mozilla.org/MPL/2.0/.

module platform {
  // -- commands --

  fn has_command(command: string): bool {
    var code: int
    sh {
      type $%command > /dev/null 2>&1
        %code=$?
    }
    pwsh {
      get-command $%command > /dev/null 2>&1
        if ($?) {
          %code = 0
        } else {
          %code = 1
        }
    }
    return code == 0
  }

  fn require_command(command: string) {
    if has_command(command) {
      return
    }

    eprintln("$command: command not found")
    exit(127)
  }

  // -- system --

  fn uname(): string {
    inline { uname -a }
  }

  fn system(): string {
    var res = ''
    sh { %res="$(uname -s)" }
    pwsh {
      %res = 'Windows'
      if ([Environment]::OsVersion.Platform.ToString() -eq 'Unix') {
        %res = uname -s
      }
    }
    return res
  }

  fn machine(): string {
    inline { uname -m }
  }

  fn is_windows(): bool {
    return system() == 'Windows'
  }

  fn is_linux(): bool {
    return system() == 'Linux'
  }

  fn is_darwin(): bool {
    return system() == 'Darwin'
  }

  fn is_busybox(name: string): bool {
    if has_command('busybox') && has_command('which') && has_command('realpath') {
      if name == '' {
        name = 'realpath'
      }
      return @realpath(@which(name)).contains('busybox')
    }
    return false
  }

  fn shell(): string {
#if sh
    return 'sh'
#else
#if pwsh
    return 'pwsh'
#else
    return 'unknown'
#endif
#endif
  }
}
