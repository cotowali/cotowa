/// os.li
///
/// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
///
/// This Source Code Form is subject to the terms of the Mozilla Public
/// License, v. 2.0. If a copy of the MPL was not distributed with this
/// file, You can obtain one at https://mozilla.org/MPL/2.0/.

require 'platform'

module os {
  var args: []string
  sh {
    array_assign %args "$@"
  }
  pwsh {
    %args = $args
  }

  fn getenv(key: string): string {
    var value = ''
    sh { %value=$(printenv $%key) }
    pwsh { %value=[string]([Environment]::GetEnvironmentVariable($%key)) }
    return value
  }

  fn setenv(key: string, value: string) {
    sh { export $%key=$%value }
    pwsh { [Environment]::SetEnvironmentVariable($%key, $%value) }
  }

  fn unsetenv(key: string) {
    sh { unset -v $%key }
    pwsh { [Environment]::SetEnvironmentVariable($%key, $null) }
  }

  module path {
    var separator = '/'
    var list_separator = ':'
    if platform::is_windows() {
      separator = '\\'
      list_separator = ';'
    }

    fn join(parts: ...string): string {
      return parts.join(separator)
    }

    fn clean(path: string): string {
      var sep = separator
      var prefix = ''
      var is_root = path.starts_with(sep)
      var res = path
      while true {
        var new = res
          .replace("$sep(\\.$sep)+", sep) // /././././ -> /
          .replace("[^.$sep]+/\\.\\.$sep", sep) // abc/../ -> /
          .replace("[^.]\\.$sep\\.\\.$sep", "..$sep") // ./../ -> ../
          .replace("${sep}+", sep) // // -> /
        var replaced = new.len() != res.len()
        res = new
        if !replaced {
          break
        }
      }
      res = res.trim_suffix(sep)
      if res == '/..' || res == './.' {
        res = ''
      }
      if res == '' {
        if is_root {
          return '/'
        }
        return '.'
      }
      if !is_root {
        res = res.trim_prefix('/')
      }
      return res
    }
  }
}
