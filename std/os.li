/// os.li
///
/// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
///
/// This Source Code Form is subject to the terms of the Mozilla Public
/// License, v. 2.0. If a copy of the MPL was not distributed with this
/// file, You can obtain one at https://mozilla.org/MPL/2.0/.

require 'platform'

module os {
  var args: []string
  sh {
    array_assign %args "$0" "$@"
  }
  pwsh {
    %args = @($MyInvoccation.MyCommand.Name) + $args
  }

  fn getenv(key: string): string {
    var value = ''
    sh { %value=$(printenv $%key) }
    pwsh { %value=[string]([Environment]::GetEnvironmentVariable($%key)) }
    return value
  }

  fn setenv(key: string, value: string) {
    sh { export $%key=$%value }
    pwsh { [Environment]::SetEnvironmentVariable($%key, $%value) }
  }

  fn unsetenv(key: string) {
    sh { unset -v $%key }
    pwsh { [Environment]::SetEnvironmentVariable($%key, $null) }
  }

  fn symlink(src: string, dest: string) {
    if platform::is_windows() {
      eprintln('symlink does not supports windows for now')
      exit(1)
    }
    if path::exists(dest) {
      "Filed to create symbolic link `$dest`: File exists"
      return
    }
    @ln('-s', src, dest)
  }

  fn username(): string {
    if platform::has_command('whoami') {
      return @whoami()
    }
    var name = ''
    sh   { %name="$USER" }
    pwsh { %name=[System.Environment]::UserName }
    return name
  }

  module path {
    var separator = '/'
    var list_separator = ':'
    if platform::is_windows() {
      separator = '\\'
      list_separator = ';'
    }

    fn join(parts: ...string): string {
      return parts.join(separator)
    }

    fn is_abs(path: string): bool {
#if pwsh
      pwsh { return [System.IO.Path]::IsPathFullyQualified(%path) }
#else
      return path.len() > 0 && path[0] == separator
#endif
    }

    fn abs(path: string): string {
      if path == '' || path == '.' {
        return pwd()
      }

      var abs_path = path
      if !is_abs(path) {
        abs_path = join(pwd(), path)
      }
      if platform::is_busybox() {
        return abs_path
      }
      if platform::has_command('python') || platform::has_command('realpath') {
        abs_path = clean(abs_path)
      }
      return abs_path
    }

    fn clean(path: string): string {
      platform::does_not_support_busybox('os::path::clean')
      var sep = separator
      var is_root = path.starts_with(sep)

      if platform::has_command('realpath') {
        if is_root {
          return @realpath('-sm', path)
        } else {
          return @realpath('-sm', '--relative-to', '.', path)
        }
      }
      if platform::has_command('python') {
        return @python('-c', 'import os, sys; print(os.path.normpath(sys.argv[1]))', path)
      }
    }

    fn exists(path: string): bool {
      sh { [ -e "$%path" ] && cotowali_true_value || cotowali_false_value }
      pwsh { [System.IO.Directory]::Exists(%path) -or [System.IO.File]::Exists(%path) }
    }

    fn is_file(path: string): bool {
      sh { [ -f "$%path" ] && cotowali_true_value || cotowali_false_value }
      pwsh { [System.IO.File]::Exists(%path) }
    }

    fn is_dir(path: string): bool {
      sh { [ -d "$%path" ] && cotowali_true_value || cotowali_false_value }
      pwsh { [System.IO.Directory]::Exists(%path) }
    }

    fn is_symlink(path: string): bool {
      if !exists(path) {
        return false
      }
      sh { [ -L "$%path" ] && cotowali_true_value || cotowali_false_value }
      pwsh { (Get-Item %path).LinkType -eq 'SymbolicLink' }
    }

    fn home(): string {
      var path = ''
      inline { %path="$HOME" }
      return path
    }
  }
}
