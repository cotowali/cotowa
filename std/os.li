/// os.li
///
/// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
///
/// This Source Code Form is subject to the terms of the Mozilla Public
/// License, v. 2.0. If a copy of the MPL was not distributed with this
/// file, You can obtain one at https://mozilla.org/MPL/2.0/.

require 'platform'

module os {
  var args: []string
  sh {
    array_assign %args "$0" "$@"
  }
  pwsh {
    %args = @($MyInvoccation.MyCommand.Name) + $args
  }

  fn getenv(key: string): string {
    var value = ''
    sh { %value=$(printenv $%key) }
    pwsh { %value=[string]([Environment]::GetEnvironmentVariable($%key)) }
    return value
  }

  fn setenv(key: string, value: string) {
    sh { export $%key=$%value }
    pwsh { [Environment]::SetEnvironmentVariable($%key, $%value) }
  }

  fn unsetenv(key: string) {
    sh { unset -v $%key }
    pwsh { [Environment]::SetEnvironmentVariable($%key, $null) }
  }

  module path {
    var separator = '/'
    var list_separator = ':'
    if platform::is_windows() {
      separator = '\\'
      list_separator = ';'
    }

    fn join(parts: ...string): string {
      return parts.join(separator)
    }

    fn is_abs(path: string): bool {
      if platform::is_windows() {
        eprintln('windows is not supported for now')
        exit(1)
      }
      return path.len() > 0 && path[0] == separator
    }

    fn abs(path: string): string {
      if is_abs(path) {
        return clean(path)
      }
      return clean(join(pwd(), path))
    }

    fn clean(path: string): string {
      if platform::is_busybox('realpath') {
        eprintln('busybox is not supported for now')
        exit(1)
      }
      var sep = separator
      var is_root = path.starts_with(sep)

      if has_command('realpath') {
        if is_root {
          return @realpath('-sm', path)
        } else {
          return @realpath('-sm', '--relative-to', '.', path)
        }
      }
      if has_command('python') {
        return @python('-c', 'import os, sys; print(os.path.normpath(sys.argv[1]))', path)
      }
    }
  }
}
