/// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
///
/// This Source Code Form is subject to the terms of the Mozilla Public
/// License, v. 2.0. If a copy of the MPL was not distributed with this
/// file, You can obtain one at https://mozilla.org/MPL/2.0/.

fn print(s: string) {
  // eprint_s is output name of local variable, s
  // TODO: integrated inline shell script
  ${printf '%s' "$print_s"}
}

fn println(s: string) {
  // see comment of print()
  ${printf '%s\n' "$println_s"}
}

fn eprint(s: string) {
  // see comment of print()
  ${printf '%s' "$eprint_s" >&2}
}

fn eprintln(s: string) {
  // see comment of print()
  ${printf '%s\n' "$eprintln_s" >&2}
}

fn string |> cat(files: ...string) |> string

fn seq(n: int) |> ...int

fn range(begin: int, end: int) |> ...int {
  // cannot use negative number on busybox
  for i in @seq(0, end - begin - 1) as ...int {
    yield (i as int) + begin
  }
}

fn rm(paths: ...string)

// --- string methods ---

fn (s: string) replace(a: string, b: string): string {
  return s |> @sed("s/$a/$b/g")
}

fn (s: string) index(t: string): int {
  return (s|> @awk('-v', "t=$t", '{print index($1, t) - 1}')) as int
}

fn (s: string) len(): int {
  var n: int
  ${ len_n=${#len_s} }
  return n
}

// ---

namespace math {
  fn pi(): float {
    return @awk('BEGIN{ printf "%g", atan2(0, -0) }') as float
  }

  fn sin(v: float): float {
    return (v |> @awk('{printf "%g", sin($1)}')) as float
  }

  fn cos(v: float): float {
    return (v |> @awk('{printf "%g", cos($1)}')) as float
  }

  fn sqrt(v: float): float {
    return (v |> @awk('{printf "%g", sqrt($1)}')) as float
  }
}
