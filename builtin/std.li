/// Copyright (c) 2021 zakuro <z@kuro.red>. All rights reserved.
///
/// This Source Code Form is subject to the terms of the Mozilla Public
/// License, v. 2.0. If a copy of the MPL was not distributed with this
/// file, You can obtain one at https://mozilla.org/MPL/2.0/.

#if pwsh
  // if powershell, skip std for now
#else

fn print(s: string) {
  sh { printf '%%s' "$%s" }
}

fn println(s: string) {
  sh { printf '%%s\n' "$%s" }
}

fn eprint(s: string) {
  sh { printf '%%s' "$%s" >&2 }
}

fn eprintln(s: string) {
  sh { printf '%%s\n' "$%s" >&2 }
}

fn exit(code: int)

fn string |> cat(files: ...string) |> string

fn seq(n: int) |> ...int

fn basename(path: string): string

fn cd(path: string)

fn dirname(path: string): string

fn mkdir(args: ...string)

fn mkdir_p(args: ...string) {
  sh {
    mkdir -p "$@"
  }
}

fn pwd(): string

fn ls(files: ...string) |> ...string

fn range(begin: int, end: int) |> ...int {
  // cannot use negative number on busybox
  for i in @seq(0, end - begin - 1) as ...int {
    yield (i as int) + begin
  }
}

fn rm(paths: ...string)

fn rm_r(paths: ...string) {
  sh {
    rm -r "$@"
  }
}

fn touch(files: ...string)

// --- string methods ---

fn (s: string) replace(a: string, b: string): string {
  return s |> @sed("s/$a/$b/g")
}

fn (s: string) index(t: string): int {
  return (s|> @awk('-v', "t=$t", '{print index($1, t) - 1}')) as int
}

fn (s: string) len(): int {
  var n: int
  sh { %n=${#%s} }
  return n
}

// --- array methods ---
// All array inherits []any

fn (arr: []any) len(): int {
  var v: int
  sh { %n=$(array_len %arr) }
  return n
}

fn (ss: []string) join(sep: string): string {
  if ss.len() == 0 {
    return ''
  }
  var ret: string
  for i in range(0, ss.len()) {
    if i > 0 {
      ret += sep
    }
    ret += ss[i]
  }
  return ret
}

//
namespace testing {
#if test
  var total_count = 0
  var passed_count = 0
  var failed_count = 0
  fn run_test(label: string, command: string) {
    print("testing $label ... ")
    sh {
      %total_count=$(( %total_count + 1 ))
      out="$($%command 2>&1)"
      if [ "$?" -eq 0 ]
      then
        printf 'OK\n'
        %passed_count=$(( %passed_count + 1 ))
      else
        printf 'FAILED\n'
        %failed_count=$(( %failed_count + 1 ))
      fi
      if [ -n "$out" ]
      then
        printf '\nOutput:\n%%s\n\n' "$out"
      fi
    }
  }
  fn finish() {
    var exit_code = 0
    print('test result: ')
    if failed_count == 0 {
      println('OK')
    } else {
      println('FAILED')
      exit_code = 1
    }
    println("$total_count total; $passed_count passed; $failed_count failed;")
    exit(exit_code)
  }
#endif
}

// ---

namespace math {
  fn pi(): float {
    return @awk('BEGIN{ printf "%g", 4 * atan2(1, 1) }') as float
  }

  fn sin(v: float): float {
    return (v |> @awk('{printf "%g", sin($1)}')) as float
  }

  fn cos(v: float): float {
    return (v |> @awk('{printf "%g", cos($1)}')) as float
  }

  fn sqrt(v: float): float {
    return (v |> @awk('{printf "%g", sqrt($1)}')) as float
  }
}

namespace os {
  var args: []string
  sh {
    array_assign %args "$@"
  }
}

#endif
